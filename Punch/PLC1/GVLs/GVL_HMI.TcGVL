<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <GVL Name="GVL_HMI" Id="{80a1a5a0-00a7-49c7-a368-c9a3531de34b}">
    <Declaration><![CDATA[{attribute 'qualified_only'}
VAR_GLOBAL
	// safeties
	i_b24VDC_CB_OK : BOOL := FALSE;
	i_bESR1 : BOOL := FALSE;
	i_bLS1 : BOOL := FALSE;
	i_bTS1 : BOOL := FALSE;
	i_bPS1 : BOOL := FALSE;
	bSafeties :BOOL := TRUE;
	
	// signals from HMI
	i_bCoreSwagingManualMode: BOOL := FALSE;
	i_bReset : BOOL := FALSE;	// reset
	
		// settings
	i_nCasingCountForStarting : INT := GVL_InitialSetting.CASING_COUNT_FOR_STARTING;
	i_nCoreCountForStarting : INT := GVL_InitialSetting.CORE_COUNT_FOR_STARTING;
	i_nPumpFeedbackCheckingTime : INT := GVL_InitialSetting.PUMP_FeedbackCheckingTime; // ms
	i_nCylinderFeedbackCheckingTime : INT := GVL_InitialSetting.CYLINDER_FeedbackCheckingTime; // ms
	i_nPCylinder1ExtendedRunningTime : INT := GVL_InitialSetting.PCYLINDER1EXTENDED_RunningTime; // ms
	i_nCylinder3ExtendedRunningTime : INT := GVL_InitialSetting.CYLINDER3EXTENDED_RunningTime; // ms
	i_nCylinder1ExtendedRunningTime : INT := GVL_InitialSetting.CYLINDER1EXTENDED_RunningTime; // ms
	i_nPCylinder1RetractedRunningTime : INT := GVL_InitialSetting.PCYLINDER1RETRACTED_RunningTime; // ms
	i_nCylinder3RetractedRunningTime : INT := GVL_InitialSetting.CYLINDER3RETRACTED_RunningTime; // ms
	i_nCylinder1RetractedRunningTime : INT := GVL_InitialSetting.CYLINDER1RETRACTED_RunningTime; // ms
	i_nPCylinder2ExtendedRunningTime : INT := GVL_InitialSetting.PCYLINDER2EXTENDED_RunningTime; // ms
	i_nCylinder4ExtendedRunningTime : INT := GVL_InitialSetting.CYLINDER4EXTENDED_RunningTime; // ms
	i_nCylinder2ExtendedRunningTime : INT := GVL_InitialSetting.CYLINDER2EXTENDED_RunningTime; // ms
	i_nCylinder4RetractedRunningTime : INT := GVL_InitialSetting.CYLINDER4RETRACTED_RunningTime; // ms
	i_nCylinder2RetractedRunningTime : INT := GVL_InitialSetting.CYLINDER2RETRACTED_RunningTime; // ms
	i_nPCylinder5ExtendedRunningTime : INT := GVL_InitialSetting.PCYLINDER5EXTENDED_RunningTime; // ms
	i_nPCylinder4ExtendedRunningTime : INT := GVL_InitialSetting.PCYLINDER4EXTENDED_RunningTime; // ms
	i_nPE4MaintainTime : INT := GVL_InitialSetting.PE4_MaintainTime; // ms
	i_nPCylinder6ExtendedRunningTime : INT := GVL_InitialSetting.PCYLINDER6EXTENDED_RunningTime; // ms
	i_nPE6MaintainTime : INT := GVL_InitialSetting.PE6_MaintainTime; // ms
	
	// output
	i_bVB1 : BOOL := FALSE;
	i_bVB2 : BOOL := FALSE;
	i_bCyl1E : BOOL := FALSE;
	i_bCyl1R : BOOL := FALSE;
	i_bCyl2E : BOOL := FALSE;
	i_bCyl2R : BOOL := FALSE;
	i_bCyl3E : BOOL := FALSE;
	i_bCyl3R : BOOL := FALSE;
	i_bCyl4E : BOOL := FALSE;
	i_bCyl4R : BOOL := FALSE;
	i_bCyl5E : BOOL := FALSE;
	i_bCyl5R : BOOL := FALSE;
	i_bCyl6E : BOOL := FALSE;
	i_bCyl6R : BOOL := FALSE;
	i_bCyl7E : BOOL := FALSE;
	i_bCyl7R : BOOL := FALSE;
	i_bCyl8E : BOOL := FALSE;
	i_bCyl8R : BOOL := FALSE;
	
	// pump
	i_nPumpState : INT := 0; // -1:Faulted, 0:Stop, 2:Running
	// cylinders
	i_nCylinder1State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder2State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder3State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder4State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder5State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder6State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder7State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nCylinder8State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nPCylinder1State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	i_nPCylinder2State : INT := 0; // -1:Faulted, 0:Extended, 1:Retracting, 2: Retracted, 3:Extending
	
	// Vibratory
	i_bPE1 : BOOL := FALSE;
	i_bPE2 : BOOL := FALSE;
	i_bPE3 : BOOL := FALSE;
	i_bPE4 : BOOL := FALSE;
	i_bPE5 : BOOL := FALSE;
	
	// Analog Value
	i_rPT1 : REAL := 1.0;
	i_rPT2 : REAL := 1.0;
	
	// working count
	nProductCount : INT := 0;
	nCasingCount: INT := 0;
	nCoreCount: INT := 0;
	
	// alram
	o_bAlarmActive: BOOL := FALSE;
	o_sAlarmMessage: STRING := '';
END_VAR]]></Declaration>
  </GVL>
</TcPlcObject>